{"version":3,"sources":["App.js","index.js"],"names":["api","App","useState","addressObj","setAddressObj","weather","setWeather","setErr","address","setAddress","getAddressObject","address_components","console","log","ShouldBeComponent","street_number","postal_code","street","province","city","country","forEach","component","shouldBe","indexOf","types","short_name","long_name","state","useEffect","a","value","geocodeByPlaceId","place_id","geocodeObj","addressObject","func","fetch","then","res","status","Error","json","result","err","navigator","geolocation","className","main","temp","d","day","getDay","getToday","Date","date","getDate","month","getMonth","year","getFullYear","dateBuilder","name","sys","condition","icon","getWeatherIcon","Math","round","feels_like","humidity","wind","speed","apiKey","initialValue","placeholder","minLength","returnKeyType","listViewDisplayed","renderDescription","row","description","fetchDetails","selectProps","onChange","e","styles","input","provided","color","option","singleValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7e8b754.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GooglePlacesAutocomplete, {\n  geocodeByPlaceId,\n} from \"react-google-places-autocomplete\";\n\nimport {\n  WiDaySunny,\n  WiRain,\n  WiCloudy,\n  WiThunderstorm,\n  WiFog,\n} from \"react-icons/wi\";\nimport { IoLocationOutline } from \"react-icons/io5\";\nimport \"./App.css\";\n\nconst api = {\n  key: \"a18f2e1334c441d547d368049603798c\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  // const [query, setQuery] = useState(\"\");\n\n  const [addressObj, setAddressObj] = useState(\"\");\n\n  const [weather, setWeather] = useState({});\n\n  const [err, setErr] = useState(\"\");\n\n  const [address, setAddress] = useState(\"\");\n\n  // const [weatherIcon, setWeatherIcon] = useState\n\n  const getAddressObject = (address_components) => {\n    console.log(address_components);\n    const ShouldBeComponent = {\n      street_number: [\"street_number\"],\n      postal_code: [\"postal_code\"],\n      street: [\"street_address\", \"route\"],\n      province: [\n        \"administrative_area_level_1\",\n        \"administrative_area_level_2\",\n        \"administrative_area_level_3\",\n        \"administrative_area_level_4\",\n        \"administrative_area_level_5\",\n      ],\n      city: [\n        \"locality\",\n        \"sublocality\",\n        \"sublocality_level_1\",\n        \"sublocality_level_2\",\n        \"sublocality_level_3\",\n        \"sublocality_level_4\",\n      ],\n      country: [\"country\"],\n    };\n\n    let address = {\n      street_number: \"\",\n      postal_code: \"\",\n      street: \"\",\n      province: \"\",\n      city: \"\",\n      country: \"\",\n    };\n\n    address_components.forEach((component) => {\n      for (var shouldBe in ShouldBeComponent) {\n        if (ShouldBeComponent[shouldBe].indexOf(component.types[0]) !== -1) {\n          if (shouldBe === \"country\") {\n            address[shouldBe] = component.short_name;\n          } else {\n            address[shouldBe] = component.long_name;\n          }\n        }\n      }\n    });\n\n    // Fix the shape to match our schema\n    address.address = address.street_number + \" \" + address.street;\n    delete address.street_number;\n    delete address.street;\n    if (address.country === \"US\") {\n      address.state = address.province;\n      delete address.province;\n    }\n    return address;\n  };\n\n  function search() {\n    fetch(\n      `${api.base}weather?q=${addressObj.city}&units=metric&APPID=${api.key}`\n    )\n      .then((res) => {\n        if (res.status === 404) {\n          throw new Error(\"I didn't find this city. Please try again!\");\n        } else {\n          setErr(null);\n          return res.json();\n        }\n      })\n\n      .then(\n        (result) => {\n          setWeather(result);\n          // setQuery(\"\");\n          console.log(result);\n        },\n        (err) => setErr(err)\n      );\n    console.log(addressObj.city);\n    // evt.target.blur();\n  }\n\n  //   function search(evt) {\n  //     if(evt.key === 'Enter') {\n  //       fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n  //        .then(res => res.json())\n  //        .then(result => {\n  //          setWeather(result);\n  //          setQuery('');\n  //          console.log(result);\n  //        });\n  //        evt.target.blur();\n  //     }\n  //  }\n\n  function dateBuilder(d) {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    let fulldate = `${date} ${month} ${year}`;\n\n    return fulldate;\n  }\n\n  function getToday(d) {\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n\n    return `${day}`;\n  }\n\n  function getWeatherIcon(condition) {\n    let icon = null;\n\n    switch (condition) {\n      case \"Clouds\":\n        icon = <WiCloudy className=\"weather-icon\" />;\n        break;\n\n      case \"Clear\":\n        icon = <WiDaySunny className=\"weather-icon\" />;\n        break;\n\n      case \"Mist\":\n        icon = <WiFog className=\"weather-icon\" />;\n        break;\n\n      case \"Rain\":\n        icon = <WiRain className=\"weather-icon\" />;\n        break;\n\n      case \"Thunderstorm\":\n        icon = <WiThunderstorm className=\"weather-icon\" />;\n        break;\n\n      default:\n        icon = <WiDaySunny className=\"weather-icon\" />;\n        break;\n    }\n\n    return icon;\n  }\n\n  useEffect(() => {\n    const func = async () => {\n      const geocodeObj =\n        address &&\n        address.value &&\n        (await geocodeByPlaceId(address.value.place_id));\n      const addressObject =\n        geocodeObj && getAddressObject(geocodeObj[0].address_components);\n      console.log(\"addressObject\", addressObject);\n      setAddressObj(addressObject);\n    };\n    func();\n  }, [address]);\n\n  useEffect(() => {\n    search();\n  }, [addressObj]);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      console.log(\"GeoLocation is Available\");\n    } else {\n      console.log(\"GeoLocation not available\");\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"app-name\">WEATHER</div>\n      <div className=\"app\">\n        <div\n          className={\n            typeof weather.main != \"undefined\"\n              ? weather.main.temp > 16\n                ? \"weather-side warm\"\n                : \"weather-side\"\n              : \"weather-side\"\n          }\n        >\n          {typeof weather.main != \"undefined\" ? (\n            <div\n              className={\n                typeof weather.main != \"undefined\"\n                  ? weather.main.temp > 16\n                    ? \"weather-gradient warm\"\n                    : \"weather-gradient\"\n                  : \"weather-gradient\"\n              }\n            >\n              <div className=\"date-container\">\n                <div className=\"day\">{getToday(new Date())}</div>\n\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n\n                <div className=\"location\">\n                  <IoLocationOutline className=\"location-icon\" />\n                  {`${weather.name}, \n                    ${weather.sys.country}`}\n                </div>\n              </div>\n\n              <div className=\"weather-container\">\n                {getWeatherIcon(weather.weather[0].main)}\n                <div className=\"weather-temp\">\n                  {Math.round(weather.main.temp)}°c\n                </div>\n\n                <div className=\"weather-desc\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        <div className=\"info-side\">\n          <div className=\"today-info-container\">\n            {typeof weather.main != \"undefined\" ? (\n              <div className=\"today-info\">\n                <div className=\"feels-like\">\n                  <span className=\"title\">FEELS LIKE</span>\n                  <span className=\"value\">\n                    {Math.round(weather.main.feels_like)}°C\n                  </span>\n                </div>\n\n                <br />\n\n                <div className=\"humidity\">\n                  <span className=\"title\">HUMIDITY</span>\n                  <span className=\"value\">{weather.main.humidity}%</span>\n                </div>\n\n                <br />\n\n                <div className=\"wind\">\n                  <span className=\"title\">WIND</span>\n                  <span className=\"value\">{weather.wind.speed} km/h</span>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n\n          <div className=\"location-box\">\n            <GooglePlacesAutocomplete\n              apiKey=\"AIzaSyAGKZ_AIonUbG33gB3fLiqfA0LQOxtbEPY\"\n              initialValue=\"Port Elizabeth\"\n              placeholder=\"Type in an address\"\n              minLength={2} // minimum length of text to search\n              returnKeyType={\"search\"}\n              listViewDisplayed={\"auto\"} // true/false/undefined\n              renderDescription={(row) => row.description}\n              fetchDetails={true}\n              selectProps={{\n                address,\n                onChange: (e) => {\n                  setAddress(e);\n                },\n                styles: {\n                  input: (provided) => ({\n                    ...provided,\n                    color: \"black\",\n                  }),\n                  option: (provided) => ({\n                    ...provided,\n                    color: \"black\",\n                  }),\n                  singleValue: (provided) => ({\n                    ...provided,\n                    color: \"black\",\n                  }),\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      <footer className=\"footer\">\n        Simple Weather Application made by Gino Swanepoel <br />© All rights\n        reserved.\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}